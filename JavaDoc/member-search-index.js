memberSearchIndex = [{"p":"classifiers","c":"KMeansClassifier","l":"addClusterBasedOnProbability(List<Double>, double)","u":"addClusterBasedOnProbability(java.util.List,double)"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"addSample(Sample)","u":"addSample(data.Sample)"},{"p":"input_output","c":"DataReader","l":"AMOUNT_OF_CLASSES"},{"p":"input_output","c":"DataReader","l":"AMOUNT_OF_SAMPLES"},{"p":"<Unnamed>","c":"App","l":"App()","u":"%3Cinit%3E()"},{"p":"classifiers","c":"KMeansClassifier","l":"areAllClustersConverged()"},{"p":"classifiers","c":"KMeansClassifier","l":"assignClusterLabels()"},{"p":"classifiers","c":"KMeansClassifier","l":"assignSamplesToClusters()"},{"p":"classifiers","c":"KMeansClassifier","l":"calculateDistancesToNearestCentroids()"},{"p":"classifiers","c":"KMeansClassifier","l":"calculateMinimumDistanceToClusters(Sample)","u":"calculateMinimumDistanceToClusters(data.Sample)"},{"p":"classifiers","c":"ClassifierUtilities","l":"calculateMinkowskiDistance(List<Float>, List<Float>, int)","u":"calculateMinkowskiDistance(java.util.List,java.util.List,int)"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"centerPoint"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"centroid"},{"p":"classifiers","c":"KMeansClassifier.Centroid","l":"Centroid(List<Float>)","u":"%3Cinit%3E(java.util.List)"},{"p":"classifiers","c":"ClassifierUtilities","l":"ClassifierUtilities()","u":"%3Cinit%3E()"},{"p":"classifiers","c":"KNNClassifier","l":"classify(List<Sample>, Sample)","u":"classify(java.util.List,data.Sample)"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"Cluster(KMeansClassifier.Centroid)","u":"%3Cinit%3E(classifiers.KMeansClassifier.Centroid)"},{"p":"classifiers","c":"KMeansClassifier","l":"clusters"},{"p":"classifiers","c":"ClassifierUtilities","l":"computeBestKmeansModel(int, int, List<Sample>, boolean, int, int)","u":"computeBestKmeansModel(int,int,java.util.List,boolean,int,int)"},{"p":"classifiers","c":"ClassifierUtilities","l":"computeBestKmeansModel(int, int, List<Sample>, boolean, int, int, int)","u":"computeBestKmeansModel(int,int,java.util.List,boolean,int,int,int)"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"computeClusterCenter()"},{"p":"classifiers","c":"KMeansClassifier","l":"computeConfusionMatrix()"},{"p":"classifiers","c":"KMeansClassifier","l":"computeEvaluationScores()"},{"p":"classifiers","c":"KMeansClassifier","l":"confusionMatrix"},{"p":"classifiers","c":"KNNClassifier","l":"confusionMatrix(List<Sample>, List<Sample>, int)","u":"confusionMatrix(java.util.List,java.util.List,int)"},{"p":"classifiers","c":"KMeansClassifier.Centroid","l":"coordinates"},{"p":"classifiers","c":"KNNClassifier","l":"crossValidation(List<Sample>, int)","u":"crossValidation(java.util.List,int)"},{"p":"input_output","c":"DataReader","l":"DataReader(String, String)","u":"%3Cinit%3E(java.lang.String,java.lang.String)"},{"p":"classifiers","c":"KMeansClassifier","l":"dataSet"},{"p":"classifiers","c":"KMeansClassifier","l":"distanceNorm"},{"p":"classifiers","c":"KNNClassifier","l":"evaluateModelOnTestSet(List<Sample>, List<Sample>, Map<String, Double>)","u":"evaluateModelOnTestSet(java.util.List,java.util.List,java.util.Map)"},{"p":"input_output","c":"ExportData","l":"ExportData()","u":"%3Cinit%3E()"},{"p":"input_output","c":"ExportData","l":"exportLabelsToCSV(List<Sample>, String)","u":"exportLabelsToCSV(java.util.List,java.lang.String)"},{"p":"input_output","c":"ExportData","l":"exportToCSV(List<Sample>, String)","u":"exportToCSV(java.util.List,java.lang.String)"},{"p":"classifiers","c":"KNNClassifier","l":"f1Score(List<Sample>, List<Sample>, int)","u":"f1Score(java.util.List,java.util.List,int)"},{"p":"classifiers","c":"KMeansClassifier","l":"f1Scores"},{"p":"data","c":"Sample","l":"features"},{"p":"input_output","c":"DataReader","l":"fileExtension"},{"p":"input_output","c":"DataReader","l":"filePath"},{"p":"classifiers","c":"KNNClassifier","l":"findBestHyperparameters(List<Sample>, int[])","u":"findBestHyperparameters(java.util.List,int[])"},{"p":"classifiers","c":"KMeansClassifier","l":"findNearestCluster(Sample)","u":"findNearestCluster(data.Sample)"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"getCenterPoint()"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"getCentroid()"},{"p":"input_output","c":"DataReader","l":"getDataSet()"},{"p":"data","c":"Sample","l":"getFeature(int)"},{"p":"data","c":"Sample","l":"getFeatures()"},{"p":"classifiers","c":"ClassifierUtilities","l":"getHyperparameters(List<Sample>)","u":"getHyperparameters(java.util.List)"},{"p":"data","c":"Sample","l":"getLabel()"},{"p":"classifiers","c":"KMeansClassifier","l":"getMethodName()"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"getSamples()"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"hasNotChanged()"},{"p":"classifiers","c":"KMeansClassifier","l":"initializeClusters()"},{"p":"classifiers","c":"KMeansClassifier","l":"initializeClustersKMeansPlusPlus()"},{"p":"classifiers","c":"KMeansClassifier","l":"initializeClustersRandom()"},{"p":"data","c":"Sample","l":"isLabelEqualTo(Sample)","u":"isLabelEqualTo(data.Sample)"},{"p":"classifiers","c":"KMeansClassifier","l":"iterations"},{"p":"classifiers","c":"KMeansClassifier","l":"k"},{"p":"classifiers","c":"KNNClassifier","l":"k"},{"p":"classifiers","c":"KMeansClassifier","l":"KMeansClassifier(int, List<Sample>, boolean, int, int)","u":"%3Cinit%3E(int,java.util.List,boolean,int,int)"},{"p":"classifiers","c":"KMeansClassifier","l":"KMeansClassifier(int, List<Sample>, boolean, int, int, int)","u":"%3Cinit%3E(int,java.util.List,boolean,int,int,int)"},{"p":"classifiers","c":"KNNClassifier","l":"KNNClassifier()","u":"%3Cinit%3E()"},{"p":"classifiers","c":"KNNClassifier","l":"KNNClassifier(int, int)","u":"%3Cinit%3E(int,int)"},{"p":"data","c":"Sample","l":"label"},{"p":"classifiers","c":"KMeansClassifier","l":"macroF1Score"},{"p":"<Unnamed>","c":"App","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"classifiers","c":"KMeansClassifier","l":"maxIterations"},{"p":"classifiers","c":"KNNClassifier","l":"p"},{"p":"classifiers","c":"KNNClassifier","l":"precision(KNNClassifier, List<Sample>, List<Sample>, int)","u":"precision(classifiers.KNNClassifier,java.util.List,java.util.List,int)"},{"p":"classifiers","c":"KMeansClassifier","l":"precisionValues"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"previousCenterPoint"},{"p":"classifiers","c":"KMeansClassifier","l":"printClusterLabels(int, List<KMeansClassifier.Cluster>)","u":"printClusterLabels(int,java.util.List)"},{"p":"classifiers","c":"KMeansClassifier","l":"printClusters(int, List<KMeansClassifier.Cluster>)","u":"printClusters(int,java.util.List)"},{"p":"classifiers","c":"ClassifierUtilities","l":"printConfusionMatrix(int[][])"},{"p":"classifiers","c":"KMeansClassifier","l":"printEvaluations()"},{"p":"input_output","c":"DataReader","l":"printFeatures(List<Sample>)","u":"printFeatures(java.util.List)"},{"p":"classifiers","c":"KMeansClassifier","l":"random"},{"p":"input_output","c":"DataReader","l":"readFeaturesFromFile(String)","u":"readFeaturesFromFile(java.lang.String)"},{"p":"classifiers","c":"KNNClassifier","l":"recall(List<Sample>, List<Sample>, int)","u":"recall(java.util.List,java.util.List,int)"},{"p":"classifiers","c":"KMeansClassifier","l":"recallValues"},{"p":"classifiers","c":"KMeansClassifier","l":"runKMeans()"},{"p":"data","c":"Sample","l":"Sample(List<Float>)","u":"%3Cinit%3E(java.util.List)"},{"p":"data","c":"Sample","l":"Sample(List<Float>, int)","u":"%3Cinit%3E(java.util.List,int)"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"samples"},{"p":"classifiers","c":"KNNClassifier","l":"score(List<Sample>, List<Sample>)","u":"score(java.util.List,java.util.List)"},{"p":"classifiers","c":"KMeansClassifier.Cluster","l":"setCentroid(KMeansClassifier.Centroid)","u":"setCentroid(classifiers.KMeansClassifier.Centroid)"},{"p":"data","c":"Sample","l":"setFeatures(List<Float>)","u":"setFeatures(java.util.List)"},{"p":"data","c":"Sample","l":"setLabel(int)"},{"p":"classifiers","c":"ClassifierUtilities","l":"splitData(List<Sample>, float)","u":"splitData(java.util.List,float)"},{"p":"data","c":"Sample","l":"toString()"},{"p":"classifiers","c":"KMeansClassifier","l":"updateCentroids()"},{"p":"classifiers","c":"KMeansClassifier","l":"usingPP"}];updateSearchResults();